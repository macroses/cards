generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String? // Добавляем это поле
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workouts      Workout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workout {
  id          String            @id @default(cuid())
  userId      String
  title       String
  color       String
  workoutDate DateTime
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  completed   Boolean           @default(false)
  startedAt   DateTime?
  endedAt     DateTime?
  exercises   WorkoutExercise[]
  sets        WorkoutSet[]
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workoutDate], name: "workout_date_idx")
}

model WorkoutExercise {
  id           String  @id @default(cuid())
  workoutId    String
  exerciseName String
  exerciseId   Int
  workout      Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

model WorkoutSet {
  id         String  @id @default(cuid())
  workoutId  String
  exerciseId Int
  weight     Int
  repeats    Int
  difficulty Int
  setTime    Int?
  workout    Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  completed  Boolean @default(false)
}
